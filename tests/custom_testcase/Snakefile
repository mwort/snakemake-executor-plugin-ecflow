import datetime as dt
import pyflow as pf

end = dt.date.today() if config["date"] == "today" else dt.date.fromisoformat(config["date"])
start = end - dt.timedelta(days=config["n_past_days"] - 1)
parameters = config["parameters"]
fc_steps = range(0, config["fc_length"] + config["fc_freq"], config["fc_freq"])

rule snakemake_ecflow_research_suite:
    input:
        "report.pdf"

rule build_plotting_env:
    #input: "plotting-env-requirements.txt"
    output: directory("environments/plotting-env")
    group: "make/envs"
    threads: 4
    resources:
        time="12:00:00",
        total_tasks=2,
        mem="4GB",
    shell:
        """
        virtualenv {output}
        source {output}/bin/activate
        # pip install -r {input}
        """

rule report:
    input:
        figures=expand("{parameter}/{step}.png", parameter=parameters.keys(), step=fc_steps),
        env=rules.build_plotting_env.output
    output: "report.pdf"
    params:
        ecflow=dict(
            labels=pf.Label("info", "Reset meter when complete"),
            meters=pf.Meter("progress", 0, 100),
            ARBITRARY_VARIABLE="value",
        )
    shell: "convert {input.figures} -quality 100 {output}"


rule download_data:
    output: "data.grb"
    shell:
        f"""
        mars <<EOF
        retrieve,
            class=ai,
            date={start:%Y-%m-%d}/to/{end:%Y-%m-%d},
            expver=1,
            levtype=sfc,
            model=aifs-single,
            param={'/'.join(map(str, parameters.values()))},
            step={'/'.join(map(str, fc_steps))},
            stream=oper,
            time=00:00:00,
            type=fc,
            target="{{output}}"
EOF
        """

rule figures:
    input: "data.grb"
    output: "{parameter}/{step}.png"
    envmodules: "python3"
    shell:
        """
        ipython -c "
        import xarray as xr, numpy as np, matplotlib.pyplot as plt
        step = np.timedelta64({wildcards.step}, 'h')
        ds = xr.open_dataset('{input}').{wildcards.parameter}.sel(step=step).mean(dim='time')
        fig = plt.figure(figsize=(10, 5))
        plt.scatter(ds.longitude, ds.latitude, c=ds.values, cmap='viridis', s=0.1)
        plt.colorbar(label='{wildcards.parameter}')
        plt.title('{wildcards.parameter} at step {wildcards.step}')
        fig.savefig('{output}', bbox_inches='tight')
        "
        """
